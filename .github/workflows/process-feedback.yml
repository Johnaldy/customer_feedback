name: Process Partner Feedback

on:
  issues:
    types: [opened, edited]

jobs:
  process-feedback:
    runs-on: ubuntu-latest
    steps:
      - name: Check if already processed
        id: check_comment
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const found = comments.data.some(c => c.body && c.body.includes('### Feedback Summary'));
            return found;
        result-encoding: string

      - name: Exit if already processed
        if: steps.check_comment.outputs.result == 'true'
        run: echo "Feedback already processed, exiting..." && exit 0

      - name: Add feedback label if missing
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.issue.labels.map(l => l.name);
            if (!labels.includes('feedback')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['feedback'],
              });
            }

      - name: Extract Feedback Data and Comment
        id: feedback
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;

            const getField = (label) => {
              const match = body.match(new RegExp(`\\*\\*${label}:\\*\\*\\s*([\\s\\S]*?)(?=\\n\\*\\*|$)`));
              return match ? match[1].trim() : '';
            };

            const engagement = getField('Engagement Name');
            let partner = getField('Partner Name');
            if (partner === 'Other') {
              partner = getField('If Other, please specify');
            }
            const date = getField('Date of Feedback');
            const engagementType = getField('Engagement Type');
            const engagementStatus = getField('Engagement Status');
            const responses = getField('Number of Responses');
            const avgSatisfaction = getField('AVG Satisfaction');
            const avgQuality = getField('AVG Quality');
            const avgCommunication = getField('AVG Communication');
            const avgImpact = getField('AVG Impact');
            const vertical = getField('Industry Vertical');
            const comments = getField('Customer Comments/Suggestions');
            const recommendations = getField('Recommendations');
            const addOns = getField('Add-on Products');

            // Calculate overall avg score
            const scores = [avgSatisfaction, avgQuality, avgCommunication, avgImpact].map(Number).filter(n => !isNaN(n));
            const avgScore = scores.length ? (scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(2) : 'N/A';

            // Build summary
            const summary = [
              '### Feedback Summary',
              `**Engagement:** ${engagement}`,
              `**Partner:** ${partner}`,
              `**Date:** ${date}`,
              `**Engagement Type:** ${engagementType}`,
              `**Status:** ${engagementStatus}`,
              `**Responses:** ${responses}`,
              `**Satisfaction:** ${avgSatisfaction}`,
              `**Quality:** ${avgQuality}`,
              `**Communication:** ${avgCommunication}`,
              `**Impact:** ${avgImpact}`,
              `**Average Score:** ${avgScore}`,
              `**Vertical:** ${vertical}`,
              `**Comments:**\n${comments}`,
              `**Recommendations:**\n${recommendations}`,
              `**Add-ons:**\n${addOns}`
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });

            // Update issue title if needed
            let title = context.payload.issue.title;
            if (!/\[AVG: \d+(\.\d{1,2})?\]/.test(title) && avgScore !== 'N/A') {
              title = `[AVG: ${avgScore}] ${title}`;
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title
              });
            }

            // Set outputs for next job
            return { avgScore, issue_number: context.issue.number };

        result-encoding: json

      - name: Call Add-to-Project Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'add-to-project-cli.yml',
              ref: context.ref,
              inputs: {
                issue_number: context.issue.number.toString(),
              }
            });
